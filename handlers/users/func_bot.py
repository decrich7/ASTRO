# -*- coding: utf-8 -*-
import os
from aiogram import types
from aiogram.types import InputFile
import asyncio
from aiogram.dispatcher import FSMContext
from analysis import Analysis
from recomend import Rec
from aiogram.dispatcher.filters.builtin import CommandStart
from states.state import AddCase
from grafik import Price, PriceIzm
from keyboards.default.button import choise_func, graf
from loader import dp, bot
from states.state import ChoiseRisk
from states.state import Func


@dp.message_handler(state=Func.func)
async def risk(message: types.Message, state: FSMContext):
    if message.text == '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤':
        an = Analysis('shares.csv', 1)
        text = '‚úÖ –¶–µ–Ω–∞ –∞–∫—Ü–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n    {}\n\n' \
               '‚úÖ C—Ä–µ–¥–Ω—è—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:\n    {}\n\n' \
               '‚úÖ –î–∏–≤–∏–¥–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥:\n    {}\n\n' \
               '‚úÖ –¶–µ–Ω–∞ –∞–∫—Ü–∏–π:\n    {}\n\n' \
               '‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n    {}$\n\n' \
               '‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n    {}%\n\n' \
               '‚úÖ –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n    {}%\n\n' \
               '‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n    {}\n\n'

        list_price = []
        for b, t in an.brokers.items():
            list_price.append(f'<b>{b}:</b>')
            list_price += [f'<b>{an.names[i]}</b>  -  <em>{round(an.prise_stock()[i], 3)}$</em>' for i in t]

        list_annual_profit = []
        for b, t in an.brokers.items():
            list_annual_profit.append(f'<b>{b}:</b>')
            list_annual_profit += [f'<b>{an.names[i]}</b>  -  <em>{round(an.annual_profit()[i], 4)}%</em>'
                                   for i in t]

        dividend_profit = []
        for b, t in an.brokers.items():
            dividend_profit.append(f'<b>{b}:</b>')
            dividend_profit += [f'<b>{an.names[i]}</b>  -  <em>{round(an.dividend_profit()[i], 4)}%</em>'
                                for i in t]

        price_all_shares = []
        for b, t in an.brokers.items():
            price_all_shares.append(f'<b>{b}:</b>')
            price_all_shares += [f'<b>{an.names[i]}</b>  -  <em>{round(an.price_all_shares()[i], 3)}$</em>'
                                 for i in t]

        await message.answer(text.format('\n    '.join(list_price),
                          '\n    '.join(list_annual_profit),
                          '\n    '.join(dividend_profit),
                          '\n    '.join(price_all_shares),
                          an.price_briefcase(),
                          *an.performance_briefcase()), reply_markup=graf)

    elif message.text == '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é':
        data = await state.get_data()
        risk = data.get("risk")
        r = Rec(str(risk).split()[0])
        text = f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ\n' \
               f'    {r.fin_stock()}\n\n' \
               f'‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å:\n' \
               f'    –î–æ - {r.profit_year()[0]}    –ü–æ—Å–ª–µ - {r.profit_year()[1]}\n\n' \
               f'‚úÖ –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:\n' \
               f'    –î–æ - {r.volatility_year()[0]}    –ü–æ—Å–ª–µ - {r.volatility_year()[1]}\n\n' \
               f'‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞:\n' \
               f'    –î–æ - {r.koef_sharp()[0]}    –ü–æ—Å–ª–µ - {r.koef_sharp()[1]}\n\n' \
               f'‚úÖ –û—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤\n' \
               f'    {r.balance()}'
        await message.answer(text, reply_markup=choise_func)

    elif message.text == 'üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ üìà':
        p = Price()
        p.get_graf()
        await asyncio.sleep(1)
        photo = InputFile(path_or_bytesio="–≥—Ä–∞—Ñ–∏–∫.png")  # Local file
        await bot.send_photo(chat_id=message.from_user.id,
                         photo=photo,
                         caption="–ó–¥–µ—Å—å —É–∫–∞–∑–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –∞–∫—Ü–∏–π –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è üíº")

    elif message.text == 'üìà –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ üìà':
        count = 0
        pz = PriceIzm()
        pz.get_graf_all()
        await asyncio.sleep(1)
        while True:
            await asyncio.sleep(0.5)
            try:
                photo = InputFile(path_or_bytesio=f"–≥—Ä–∞—Ñ–∏–∫{count}.png")  # Local file
                await bot.send_photo(chat_id=message.from_user.id,
                                     photo=photo,
                                     caption="")
            except:
                break
            count += 1
